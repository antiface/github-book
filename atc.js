// Generated by CoffeeScript 1.3.3
(function() {

  define(['module', 'underscore', 'backbone', 'jquery', 'bookish/controller', 'bookish/models', 'bookish/views', 'bookish/media-types', 'bookish/auth', 'hbs!atc-nav-serialize'], function(module, _, Backbone, jQuery, Controller, Models, Views, MEDIA_TYPES, Auth, NAV_SERIALIZE) {
    var AtcWorkspace, DEBUG_USER, Models_BaseBook_initialize, Models_Folder_initialize, ROOT_URL, STORED_KEYS, WORKSPACE_URL, resetDesktop,
      _this = this;
    DEBUG_USER = module.config().debugUser;
    ROOT_URL = module.config().rootUrl || '';
    if (DEBUG_USER) {
      Backbone.ajax = function(config) {
        config = _.extend(config, {
          headers: {
            'X-REMOTEAUTHID': DEBUG_USER
          }
        });
        return Backbone.$.ajax.apply(Backbone.$, [config]);
      };
    }
    WORKSPACE_URL = "" + ROOT_URL + "/workspace/";
    Auth.url = function() {
      return "" + ROOT_URL + "/me/";
    };
    Auth.fetch();
    Models.BaseContent.prototype.urlPrefix = "" + ROOT_URL + "/module";
    Models.BaseBook.prototype.urlPrefix = "" + ROOT_URL + "/collection";
    Models.Folder.prototype.urlPrefix = "" + ROOT_URL + "/folder";
    Models.Deferrable.prototype.url = function() {
      if (this.isNew()) {
        return "" + this.urlPrefix + "/";
      }
      return "" + this.urlPrefix + "/" + this.id;
    };
    Models_BaseBook_initialize = Models.BaseBook.prototype.initialize;
    Models.BaseBook.prototype.initialize = function() {
      var _this = this;
      Models_BaseBook_initialize.apply(this, arguments);
      this.on('change:body', function(model, body, options) {
        var $body, $root, navTree;
        if (options != null ? options.doNotReparse : void 0) {
          return;
        }
        if (body instanceof Array) {
          return model.set('body', body.join(''));
        }
        $body = jQuery(body);
        if ($body.is('nav')) {
          $root = $body;
        } else {
          $root = $body.find('nav').first();
        }
        if ($root[0]) {
          navTree = _this.parseNavTree($root);
          return _this.navTreeRoot.reset(navTree.children);
        }
      });
      this.navTreeRoot.on('all', function() {
        return _this.set({
          body: NAV_SERIALIZE(_this.navTreeRoot.toJSON())
        }, {
          doNotReparse: true
        });
      });
      return this.navTreeRoot.descendants.on('all', function() {
        return _this.set({
          body: NAV_SERIALIZE(_this.navTreeRoot.toJSON())
        }, {
          doNotReparse: true
        });
      });
    };
    Models.Folder.prototype.parse = function(obj) {
      var models;
      models = [];
      _.each(obj.body, function(item) {
        var hackType, mediaType, model;
        if ('string' === typeof item) {
          hackType = item.split(':')[0];
          mediaType = (function() {
            switch (hackType) {
              case 'cnxmodule':
                return 'application/vnd.org.cnx.module';
              case 'cnxcollection':
                return 'application/vnd.org.cnx.collection';
              default:
                throw 'BUG:TYPE_NOT_FOUND';
            }
          })();
          item = {
            id: item,
            mediaType: mediaType,
            title: 'FOLDER_HACK_TITLE'
          };
        }
        model = Models.ALL_CONTENT.get(item.id);
        if (model) {
          return models.push(model);
        }
      });
      this.contents.reset(models);
      delete obj.body;
      return obj;
    };
    Models_Folder_initialize = Models.Folder.prototype.initialize;
    Models.Folder.prototype.initialize = function(obj) {
      var Type, item, model, _i, _len, _ref,
        _this = this;
      if (obj == null) {
        obj = {};
      }
      Models_Folder_initialize.apply(this, arguments);
      _ref = obj.body || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        Type = MEDIA_TYPES.get(item.mediaType);
        model = new Type(item);
        this.contents.add(model);
      }
      return this.contents.on('all', function() {
        var args, json;
        args = _.toArray(arguments);
        json = [];
        _this.contents.each(function(item) {
          return json.push(item.id);
        });
        return _this.set('body', json);
      });
    };
    AtcWorkspace = Models.DeferrableCollection.extend({
      url: WORKSPACE_URL,
      parse: function(results) {
        var ContentType, item, model;
        results = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            item = results[_i];
            ContentType = MEDIA_TYPES.get(item.mediaType);
            model = new ContentType(item);
            _results.push(model);
          }
          return _results;
        })();
        return results;
      },
      initialize: function() {
        var _this = this;
        this.on('add', function(model) {
          return Models.ALL_CONTENT.add(model);
        });
        this.on('reset', function(collection) {
          return Models.ALL_CONTENT.add(_this.models);
        });
        return this.listenTo(Models.ALL_CONTENT, 'add', function(model) {
          return _this.add(model);
        });
      }
    });
    Models.WORKSPACE = new AtcWorkspace();
    resetDesktop = function() {
      Models.ALL_CONTENT.reset();
      Models.WORKSPACE.fetch();
      if (!Backbone.History.started) {
        Controller.start();
      }
      return Backbone.history.navigate('workspace');
    };
    STORED_KEYS = ['username', 'password'];
    Auth.on('change', function() {
      if (!_.isEmpty(_.pick(Auth.changed, STORED_KEYS))) {
        if (Auth.get('password') && !Auth.previousAttributes()['password']) {
          return;
        }
        return resetDesktop();
      }
    });
    if (!Backbone.History.started) {
      Controller.start();
    }
    return Backbone.history.navigate('workspace');
  });

}).call(this);
