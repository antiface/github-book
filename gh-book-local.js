// Generated by CoffeeScript 1.3.3
(function() {

  require.config({
    paths: {
      'aloha': 'lib/Aloha-Editor/src/lib/aloha'
    }
  });

  require(['jquery', 'backbone', 'gh-book'], function(jQuery, Backbone) {
    var CALLBACK_DELAY, CH1_ID, CH1_PATH, CH2_ID, CH2_PATH, DEBUG, NAV_PATH, OPF_ID, OPF_LANGUAGE, OPF_PATH, OPF_TITLE, delay, readFile, writeFile;
    CALLBACK_DELAY = 0;
    DEBUG = true;
    OPF_ID = '12345';
    OPF_TITLE = 'Github EPUB Editor';
    OPF_LANGUAGE = 'en';
    OPF_PATH = 'book.opf';
    NAV_PATH = 'navigation.html';
    CH1_PATH = 'background.html';
    CH2_PATH = 'introduction.html';
    CH1_ID = 'id-1-background';
    CH2_ID = 'id-2-intro';
    window.FILES = {};
    FILES['META-INF/container.xml'] = "<?xml version='1.0' encoding='UTF-8'?>\n<container xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\" version=\"1.0\">\n <rootfiles>\n    <rootfile full-path=\"" + OPF_PATH + "\" media-type=\"application/oebps-package+xml\"/>\n </rootfiles>\n</container>";
    FILES[OPF_PATH] = "<?xml version=\"1.0\"?>\n<package version=\"3.0\"\n         xml:lang=\"en\"\n         xmlns=\"http://www.idpf.org/2007/opf\"\n         unique-identifier=\"pub-id\">\n    <metadata xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n        <dc:identifier\n              id=\"pub-id\">" + OPF_ID + "</dc:identifier>\n        <meta refines=\"#pub-id\"\n              property=\"identifier-type\"\n              scheme=\"xsd:string\">uuid</meta>\n\n        <dc:language>" + OPF_LANGUAGE + "</dc:language>\n        <dc:title>" + OPF_TITLE + "</dc:title>\n\n    </metadata>\n\n    <manifest>\n        <item id=\"id-navigation\"\n              properties=\"nav\"\n              href=\"" + NAV_PATH + "\"\n              media-type=\"application/xhtml+xml\"/>\n        <item id=\"" + CH2_ID + "\"\n              href=\"" + CH2_PATH + "\"\n              media-type=\"application/xhtml+xml\"/>\n        <item id=\"" + CH1_ID + "\"\n              href=\"" + CH1_PATH + "\"\n              media-type=\"application/xhtml+xml\"/>\n    </manifest>\n    <spine>\n        <itemref idref=\"" + CH1_ID + "\"/>\n        <itemref idref=\"" + CH2_ID + "\"/>\n    </spine>\n</package>";
    FILES[NAV_PATH] = "<p>Example Navigation</p>\n<nav>\n  <ol>\n    <li><a href=\"" + CH1_PATH + "\">Background Information</a></li>\n    <li>\n      <span>Chapter 1</span>\n      <ol>\n        <li><a href=\"" + CH2_PATH + "\">Introduction to gh-book</a></li>\n      </ol>\n    </li>\n  </ol>\n</nav>";
    FILES[CH1_PATH] = '<h1>Background</h1>';
    FILES[CH2_PATH] = '<h1>Introduction</h1>';
    FILES['background.json'] = JSON.stringify({
      title: 'Background Module Title'
    });
    readFile = function(path) {
      return function(promise) {
        if (path in FILES) {
          return promise.resolve(FILES[path]);
        } else {
          return promise.fail({
            message: 'IN_MEM_COULD_NOT_FIND_FILE'
          });
        }
      };
    };
    writeFile = function(path, data) {
      return function(promise) {
        FILES[path] = data;
        return promise.resolve({
          message: 'IN_MEM_SAVED'
        });
      };
    };
    delay = function(operation) {
      var fn, promise;
      promise = new jQuery.Deferred();
      fn = function() {
        return operation(promise);
      };
      if (0 === CALLBACK_DELAY) {
        fn();
      } else {
        setTimeout(fn, CALLBACK_DELAY);
      }
      return promise;
    };
    return Backbone.sync = function(method, model, options) {
      var id, path, ret,
        _this = this;
      path = model.id || (typeof model.url === "function" ? model.url() : void 0) || model.url;
      if (DEBUG != null) {
        console.log(method, path);
      }
      switch (method) {
        case 'read':
          ret = delay(readFile(path));
          break;
        case 'update':
          ret = delay(writeFile(path, model.serialize()));
          break;
        case 'create':
          id = _uuid();
          model.set('id', id);
          ret = delay(writeFile(path, model.serialize()));
          break;
        default:
          throw "Model sync method not supported: " + method;
      }
      ret.done(function(value) {
        return options != null ? typeof options.success === "function" ? options.success(model, value, options) : void 0 : void 0;
      });
      ret.fail(function(error) {
        return options != null ? typeof options.error === "function" ? options.error(model, error, options) : void 0 : void 0;
      });
      return ret;
    };
  });

}).call(this);
